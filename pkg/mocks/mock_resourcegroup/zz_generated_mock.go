// /*
// Copyright 2019 Alexander Eldeib.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexeldeib/incendiary-iguana/pkg/clients/resourcegroups (interfaces: Client)

// Package mock_resourcegroup is a generated GoMock package.
package mock_resourcegroup

import (
	context "context"
	reflect "reflect"

	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-05-01/resources"
	v1alpha1 "github.com/alexeldeib/incendiary-iguana/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockClient) Delete(arg0 context.Context, arg1 *v1alpha1.ResourceGroup) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0, arg1)
}

// Ensure mocks base method
func (m *MockClient) Ensure(arg0 context.Context, arg1 *v1alpha1.ResourceGroup) (resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ensure", arg0, arg1)
	ret0, _ := ret[0].(resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ensure indicates an expected call of Ensure
func (mr *MockClientMockRecorder) Ensure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockClient)(nil).Ensure), arg0, arg1)
}

// ForSubscription mocks base method
func (m *MockClient) ForSubscription(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForSubscription indicates an expected call of ForSubscription
func (mr *MockClientMockRecorder) ForSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForSubscription", reflect.TypeOf((*MockClient)(nil).ForSubscription), arg0)
}

// Get mocks base method
func (m *MockClient) Get(arg0 context.Context, arg1 *v1alpha1.ResourceGroup) (resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0, arg1)
}
