package reconcilers

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

// This is a Keyvault generated, self-signed pfx valid for 24 months from 11/2/2019.
// It has common name foo.bar, and dns names bar.baz and foo.bar.baz.
// n.b., the trailing new lines are currently expected (TODO)
var (
	testPfx = "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"
	// base16 encoded SHA1 of the raw bytes of that cert
	expectedSHA  = "866ED31E971D654EBDC14716324EEFB369C23EC8"
	expectedX509 = `subject=/CN=foo.bar
issuer=/CN=foo.bar
-----BEGIN CERTIFICATE-----
MIIDTTCCAjWgAwIBAgIQaBnuFzJKTQeKRo7DkI+KezANBgkqhkiG9w0BAQsFADAS
MRAwDgYDVQQDEwdmb28uYmFyMB4XDTE5MTEwMjA3MzcyOVoXDTIxMTEwMjA3NDcy
OVowEjEQMA4GA1UEAxMHZm9vLmJhcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBAI+ymMK8k0TLx4AvtTFHMhbYBQnM5vL/qALFPHbmnTQeXupgl4FihB4x
6YsXbVSiZPgwTBp2XooJIhHds89gd9HICj1EwGoDj2RhgZCXgXNhLwKC+X1Zredi
mfgPn98fr6mvyZ1eC8jktQ6l7UaZdMk+E8MnokSEhyKsjyzlQYiWYhuVUtk7sI01
cFhdx9DIWXFEFtMfTgSXJHD7kK5ggMD5WIR+IDp1ybjIc8rqhWKgv/AEbtuMkmJv
znvDPs4soxMUJuFOHoRrs72aw4jEWR7ksJrxGLkMIfb6XK2ddWD/FF5OzNPyc2MR
Rp/Fa2UNfmcBZArS5VQjhaNPtiZYM9MCAwEAAaOBnjCBmzAOBgNVHQ8BAf8EBAMC
BaAwCQYDVR0TBAIwADAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHwYD
VR0RBBgwFoILZm9vLmJhci5iYXqCB2Jhci5iYXowHwYDVR0jBBgwFoAU+nkaB9Rs
XOHwKr6Qv0bwx/0VcEkwHQYDVR0OBBYEFPp5GgfUbFzh8Cq+kL9G8Mf9FXBJMA0G
CSqGSIb3DQEBCwUAA4IBAQBrQtbl8TQ+WS62fLP5iU8MUJQWIfcoEoE24A9Y+smE
+jz8O5vXjDHlDn3MPS3jlgyWW33ojpa0p5G5qFzHyoOtpwDCnfQ85rgGSdyFD/ah
CuEVWI1klKZZLgjC0meDq2ZQITZptOcTl2zxV7ctX40e3riUE4vrscZa8HYjZRgz
uIpsKQQn80yuETdHyjgEkwWl7ZFc5FJL+KFw4bxpnOzTFu0rUUzKkIfZwDBwoz50
MhywfVtrENxgI1/NgaGqkTEsETXOtXm0vkE4KpJgKxEnc9GnwEvo+Uzc7GF6Ittw
dHjT/+NwdxSQavYG9HlrTaygVJfA2s33RsFQMkcq6frG
-----END CERTIFICATE-----

`

	// pkcs8 data of same pfx above
	expectedPKCS8 = `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCPspjCvJNEy8eA
L7UxRzIW2AUJzOby/6gCxTx25p00Hl7qYJeBYoQeMemLF21UomT4MEwadl6KCSIR
3bPPYHfRyAo9RMBqA49kYYGQl4FzYS8Cgvl9Wa3nYpn4D5/fH6+pr8mdXgvI5LUO
pe1GmXTJPhPDJ6JEhIcirI8s5UGIlmIblVLZO7CNNXBYXcfQyFlxRBbTH04ElyRw
+5CuYIDA+ViEfiA6dcm4yHPK6oVioL/wBG7bjJJib857wz7OLKMTFCbhTh6Ea7O9
msOIxFke5LCa8Ri5DCH2+lytnXVg/xReTszT8nNjEUafxWtlDX5nAWQK0uVUI4Wj
T7YmWDPTAgMBAAECggEAFLNUwFDsIi/8+GFnB8dK1vGdoDDNYFol+Ogy8qn8IYLy
h28MxE3N3I+yJiBk1pliVEKY5AMDUX1JVCuM+KXb/POFThg2Y89Je9t0D8FTm6x3
WjRF/qHJpJiWt56AmGL3KkmxkKL4raMM1iRfDxmSMl9n92ghPx+cXAlhwsTv8N4J
0jAFJOAD273bOPxuRqno7GMX+vsec0I1okXFV0iLKrsDeiVugKkq4pRClkGVGpBW
8S5/v0GujyE6WKbtxST883K6lFapj/ncOf9I+A7LD3Lg853+feltyyMFXftXK3jM
lIzfIbHO65RgxmnzEp7FIGoNVgGnWZJS3P5uVu0/6QKBgQC6pBOsBj1KDYqwJmQJ
mjOjtWGwpxrYzXaYHYpnE4asaAMnxkrmI3/bTD1rGZKMeaxVnK+N0khy3szMDiAH
+XDY7KweNQ4SiDWXuXnUk7YzLBPLiPGl7OmZS1dyOqmSD+HBSSSNcBVKZgCBsByw
cqbzarHTyKW/ORjbl737KFHXnwKBgQDFGSXbFEHRQpU4yIge7r8FjgEHq+SH6jxt
E1RSYrJ/2OqGZblL+8yzWHk24k9k2pk2Fh6KfUF4g2YDYW2RV2k4M3wgPBDQVx58
cZTF3hg7aunUmPtL+FzlHrGSYH6pkLqfKPlyppIBcXcmGP2yqT8YqRZv9keTuoSz
Vli5WwsHTQKBgCFXxpvo0XI1UR1+/kgo4CjS8ozYjZdFvXYXcO5RMrICMu4cIq1S
kjjfOem0O9YUtpDk2QgBFShQXU3nCBnkmiBmx6jt2YG+C7T7UaSEbvxdV3v5DxKR
bHoSV6D0ke6iH7akFn+eEm+kIVsJ11Y+ZUz/Np2bLuEmliZEyY/g+B4JAoGAFqPU
3V1uUgM78NHYEPWLq6+sHp14GsSlPEJEJVKA/n6EMfvtVPUPhmpbQhqs1ADoKHZR
+8Z3hshRJ4JBe7h2taX0VB+SLtxS/Chv1mq0jd6yDWGlPAzDXu4vp4i+A+xEA5RJ
UwofK1tFPHMScTtPrB2AHkxD3IxIQfFhL6ltkuECgYEAjPi1iC/sa+WJ6l+GZPNF
vhzflscUspVo2wkvpFyxYjuy5S0d+EWc6kFmJXp2mKHr44bNApYnXda8+XdadOo1
MdA73l7ZN09NgvjV4uy8x/yib3ZT23xfmQb7cPffDjiEG7TKnbkugoLIGV+spBb6
SMgG0sg8gf2ia4Rxuvfk5DY=
-----END PRIVATE KEY-----
`
	// rsa data of same pfx above
	expectedRSA = `-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAj7KYwryTRMvHgC+1MUcyFtgFCczm8v+oAsU8duadNB5e6mCX
gWKEHjHpixdtVKJk+DBMGnZeigkiEd2zz2B30cgKPUTAagOPZGGBkJeBc2EvAoL5
fVmt52KZ+A+f3x+vqa/JnV4LyOS1DqXtRpl0yT4TwyeiRISHIqyPLOVBiJZiG5VS
2TuwjTVwWF3H0MhZcUQW0x9OBJckcPuQrmCAwPlYhH4gOnXJuMhzyuqFYqC/8ARu
24ySYm/Oe8M+ziyjExQm4U4ehGuzvZrDiMRZHuSwmvEYuQwh9vpcrZ11YP8UXk7M
0/JzYxFGn8VrZQ1+ZwFkCtLlVCOFo0+2Jlgz0wIDAQABAoIBABSzVMBQ7CIv/Phh
ZwfHStbxnaAwzWBaJfjoMvKp/CGC8odvDMRNzdyPsiYgZNaZYlRCmOQDA1F9SVQr
jPil2/zzhU4YNmPPSXvbdA/BU5usd1o0Rf6hyaSYlreegJhi9ypJsZCi+K2jDNYk
Xw8ZkjJfZ/doIT8fnFwJYcLE7/DeCdIwBSTgA9u92zj8bkap6OxjF/r7HnNCNaJF
xVdIiyq7A3olboCpKuKUQpZBlRqQVvEuf79Bro8hOlim7cUk/PNyupRWqY/53Dn/
SPgOyw9y4POd/n3pbcsjBV37Vyt4zJSM3yGxzuuUYMZp8xKexSBqDVYBp1mSUtz+
blbtP+kCgYEAuqQTrAY9Sg2KsCZkCZozo7VhsKca2M12mB2KZxOGrGgDJ8ZK5iN/
20w9axmSjHmsVZyvjdJIct7MzA4gB/lw2OysHjUOEog1l7l51JO2MywTy4jxpezp
mUtXcjqpkg/hwUkkjXAVSmYAgbAcsHKm82qx08ilvzkY25e9+yhR158CgYEAxRkl
2xRB0UKVOMiIHu6/BY4BB6vkh+o8bRNUUmKyf9jqhmW5S/vMs1h5NuJPZNqZNhYe
in1BeINmA2FtkVdpODN8IDwQ0FcefHGUxd4YO2rp1Jj7S/hc5R6xkmB+qZC6nyj5
cqaSAXF3Jhj9sqk/GKkWb/ZHk7qEs1ZYuVsLB00CgYAhV8ab6NFyNVEdfv5IKOAo
0vKM2I2XRb12F3DuUTKyAjLuHCKtUpI43znptDvWFLaQ5NkIARUoUF1N5wgZ5Jog
Zseo7dmBvgu0+1GkhG78XVd7+Q8SkWx6Eleg9JHuoh+2pBZ/nhJvpCFbCddWPmVM
/zadmy7hJpYmRMmP4PgeCQKBgBaj1N1dblIDO/DR2BD1i6uvrB6deBrEpTxCRCVS
gP5+hDH77VT1D4ZqW0IarNQA6Ch2UfvGd4bIUSeCQXu4drWl9FQfki7cUvwob9Zq
tI3esg1hpTwMw17uL6eIvgPsRAOUSVMKHytbRTxzEnE7T6wdgB5MQ9yMSEHxYS+p
bZLhAoGBAIz4tYgv7GvliepfhmTzRb4c35bHFLKVaNsJL6RcsWI7suUtHfhFnOpB
ZiV6dpih6+OGzQKWJ13WvPl3WnTqNTHQO95e2TdPTYL41eLsvMf8om92U9t8X5kG
+3D33w44hBu0yp25LoKCyBlfrKQW+kjIBtLIPIH9omuEcbr35OQ2
-----END RSA PRIVATE KEY-----
`
)

func TestFormatX509(t *testing.T) {
	formatted, err := formatX509Default(testPfx)
	if err != nil {
		t.Fatalf(err.Error())
	}
	failUnequal(t, expectedX509, string(formatted))
}

func TestFormatPKCS8(t *testing.T) {
	formatted, err := formatPKCS8(testPfx)
	if err != nil {
		t.Fatalf(err.Error())
	}
	failUnequal(t, expectedPKCS8, string(formatted))
}

func TestFormatRSA(t *testing.T) {
	formatted, err := formatRSA(testPfx)
	if err != nil {
		t.Fatalf(err.Error())
	}
	failUnequal(t, expectedRSA, string(formatted))
}

func TestFormatSHA(t *testing.T) {
	formatted, err := formatSecretSHA(testPfx)
	if err != nil {
		t.Fatalf(err.Error())
	}
	failUnequal(t, expectedSHA, string(formatted))
}

func failUnequal(t *testing.T, a, b interface{}) {
	diff := cmp.Diff(a, b)
	if diff != "" {
		t.Fatalf(diff)
	}
}
